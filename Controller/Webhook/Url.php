<?php

declare(strict_types=1);

namespace Elgentos\PrismicIO\Controller\Webhook;

use Elgentos\PrismicIO\Api\ConfigurationInterface;
use Elgentos\PrismicIO\Model\Api;
use Magento\CmsUrlRewrite\Model\CmsPageUrlRewriteGenerator;
use Magento\Framework\App\Action\HttpPostActionInterface;
use Magento\Framework\App\CsrfAwareActionInterface;
use Magento\Framework\App\Request\InvalidRequestException;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Controller\ResultInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Magento\UrlRewrite\Model\UrlPersistInterface;
use Magento\UrlRewrite\Model\UrlRewriteFactory;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Psr\Log\LoggerInterface;

class Url implements HttpPostActionInterface, CsrfAwareActionInterface
{
    private RequestInterface $request;

    private ConfigurationInterface $configuration;

    private StoreManagerInterface $storeManager;

    private Api $apiFactory;

    private ResultFactory $resultFactory;

    private UrlFinderInterface $urlFinder;

    private UrlRewriteFactory $urlRewriteFactory;

    private UrlPersistInterface $urlPersist;

    private LoggerInterface $logger;

    public function __construct(
        RequestInterface $request,
        ConfigurationInterface $configuration,
        StoreManagerInterface $storeManager,
        Api $apiFactory,
        ResultFactory $resultFactory,
        UrlFinderInterface $urlFinder,
        UrlRewriteFactory $urlRewriteFactory,
        UrlPersistInterface $urlPersist,
        LoggerInterface $logger
    ) {
        $this->request = $request;
        $this->configuration = $configuration;
        $this->storeManager = $storeManager;
        $this->apiFactory = $apiFactory;
        $this->resultFactory = $resultFactory;
        $this->logger = $logger;
        $this->urlFinder = $urlFinder;
        $this->urlRewriteFactory = $urlRewriteFactory;
        $this->urlPersist = $urlPersist;
    }

    public function execute(): ResultInterface
    {
        $result = $this->resultFactory->create(ResultFactory::TYPE_JSON);

        $payload = $this->request->getContent();
        $this->logger->info($payload);
        $payload = $this->mockRequestContent();

        $store = $this->storeManager->getStore();

        $urlRewriteDocumentTypes = $this->configuration->getUrlRewriteContentTypes(
            $store
        );

        if (!$urlRewriteDocumentTypes) {
            return $result->setData([
                'success' => true
            ]);
        }

        $documentIds = $payload['documents'];
        if (empty($documentIds)) {
            return $result->setData([
                'success' => true
            ]);
        }

        $api = $this->apiFactory->create();

        foreach ($documentIds as $documentId) {
            $document = $api->getByID($documentId);

            /** @var \Magento\UrlRewrite\Model\UrlRewrite $urlRewrite */
            $urlRewrite = $this->urlFinder->findOneByData([
                UrlRewrite::REQUEST_PATH => $document->uid,
                UrlRewrite::STORE_ID => $store->getId()
            ]);

            if ($urlRewrite && $urlRewrite->getEntityType() === CmsPageUrlRewriteGenerator::ENTITY_TYPE) {
                $this->urlPersist->deleteByData([
                    UrlRewrite::REQUEST_PATH => $document->uid,
                    UrlRewrite::STORE_ID => $store->getId()
                ]);

                $urlRewrite = null;
            }

            if (!$urlRewrite) {
                /** @var \Magento\UrlRewrite\Model\UrlRewrite $urlRewrite */
                $urlRewrite = $this->urlRewriteFactory->create();
                $urlRewrite->setEntityType('custom');
                $urlRewrite->setRequestPath($document->uid);
                $urlRewrite->setTargetPath('prismicio/direct/page/type/' . $document->type . '/uid/' . $document->uid);
                $urlRewrite->setStoreId($store->getId());
                $urlRewrite->setIsSystem(0);
                $urlRewrite->setIsAutogenerated(1);

                $urlRewrite->save();
            }
        }
    }

    public function createCsrfValidationException(RequestInterface $request): ?InvalidRequestException
    {
        return null;
    }

    public function validateForCsrf(RequestInterface $request): ?bool
    {
        return true;
    }

    private function mockRequestContent(): array
    {
        return json_decode(
            '{"type":"api-update","masterRef":"YrrWixEAACEA7wiR","releases":{},"masks":{},"tags":{},"experiments":{},"documents":["YrWDJxEAACIA2D6V"],"domain":"moma","apiUrl":"https://moma.prismic.io/api","secret":null}',
            true
        );
    }
}
